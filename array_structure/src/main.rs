
// 随机访问
fn random_access(nums: &[i32]) -> i32{
    // 在区间[0, nums.len()]中随机取出一个数字
    let random_index = 12;
    // 获得随机返回的元素
    let random_num = nums[random_index];
    random_num
}


// 插入一个元素
fn insert(nums: &mut [i32], num: i32, index: usize){
    // 把索引index以及之后的所有元素向后移动一位
    for i in (index+1..nums.len()).rev(){
        nums[i] = nums[i-1];
    }

    // 将num赋给index处的元素
    nums[index] = num;
}

// 删除一个元素
fn delete(nums: &mut [i32], index: usize){
    // 将索引index以及之后的元素都向前移动一位
    for i in index..nums.len()-1{
        nums[i] = nums[i+1];
    }

}

// 遍历数组
fn traverse(nums: &[i32]){
    let mut _count = 0;

    // 用索引遍历
    for i in 0..nums.len(){
        _count += nums[i];
    }

    // 直接遍历数组元素
    for num in nums{
        _count += num;
    }

}

// 在数组中查找元素
/* 因为数组是线性结构，所以子啊数组中查找元素被称为线性查找 */
fn find(nums: &[i32], target: i32) -> Option<usize>{
    for i in 0..nums.len(){
        if nums[i] == target{
            return Some(i);
    }
    }
    None
}

// 扩容数组
/* 在复杂的系统环境中，程序难以保证数组后面的内存是可用的，所以无法安全的扩展数组的容量，
    所以在大多数的编程语言中，数组的长度都是不可变的 */
// 扩展数组
fn extend(nums: &[i32], enlarge: usize) -> Vec<i32>{
    // 初始化一个扩展后的数组，用一个动态数组来表示
    let mut res = vec![0; nums.len() + enlarge];

    for i in 0..nums.len(){
        res[i] = nums[i];
    }
    // 返回扩展后的数组
    res
}

// 数组的优点和局限性
/* 
    优点：
        1.空间效率高：数组为数据分配了一块连续的内存块，无需额外的结构开销
        2.支持随机访问：数组允许在O(1)的时间复杂度下访问数组内的任何元素
        3.缓存局部性：当访问数组中的某个元素时，计算机不仅会加载他，还会缓存其周围的其他数据，从而借助告诉缓存
        来提高后续操作的执行速度
        
    缺点：
         1.插入和删除效率低：当数组中的元素较多时，插入和删除需要移动大量的元素
         2。长度不可变：数组在初始化时长度就固定了，扩容数组需要将原数组的所有数据全部复制到新数组，开销很大
         3.空间浪费：如果数组分配的内存大小超过了它本身所需，那么多余的空间就被浪费了
*/

// 数组的典型应用
/*
    1.随机访问：如果我们想要随机抽取一些样本，那么可以用数组存储，并生成一个随机序列，根据索引实现随机抽样
    2.排序和搜索：数组是排序和搜索算法最常用的数据结构。开苏排序、归并排序、二分查找等都主要在数组上进行
    3.查找表；当我们需要快速查找一个元素或其对应关系时，可以使用数组作为查找表。加入我们想要实现字符到ASCII码的
    映射，则可以将字符的ASCII码值作为索引，对应的元素存放在数组的相应位置上
    4.机器学习：神经网络中使用了大量的向量、矩阵、张量之间的线性代数运算，这些数据都是以数组的形式存储的。数组是
    神经网络编程中最常见和最常使用的数据结构
    5.数据结构实现：数组可以用于实现栈、队列、哈希表、堆、图等数据结构。例如，图的邻接矩阵表示实际上是一个二维数组
 */

fn main(){
    println!("数组练习");
}