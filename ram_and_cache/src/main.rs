/* 物理结构很大程度上决定了程序对内存和缓存的使用效率，进而影响算法程序的整体性能。
    1.数据结构的内存效率
        1.内存是有限的，且同一块内存不能被u多个程序共享，因此我们希望数据结构能够尽可能高效地利用空间。数组的元素紧密排列，不需要额外的空间来存储链表节点间的引用（指针），因此
        空间效率更高。但是，数组需要一次性分配足够的连续内存空间，这可能导致额外的空间浪费，且数组的扩容也需要额外的时间和空间成本。相比之下，链表是以节点为单位进行动态的内存分配
        和回收，提供了更大的灵活性。
        2.在程序的运行过程中，随着反复的申请和释放内存，空闲内存的碎片化程度会越来越高，从而导致内存的利用效率降低。数组由于其连续的存储方式，相对不容易导致内存碎片化。相反，链表的元素是分散存储的，
        在频繁的插入和删除操作中，更容易导致内存碎片化。
    2.数据结构的缓存效率
        如果CPU尝试访问的数据不在缓存中，就会发生缓存未命中(cache miss)，此时CPU从速度较慢的内存中加载所需的数据。
        显然，cache miss越少，CPU读写的效率就越高，程序的性能就越好。我们将CPU从缓存中成功获取到数据的比例称为缓存命中率(cache hit rate)，这个指标通常用来衡量缓存效率。
        为了尽可能达到更高的效率，缓存会采取以下数据加载机制：
        1.*/


fn main() {
    println!("Hello, world!");
}
